= Deploy MySQL
:sectnums:


We'll now deploy a single-instance MySQL database, so we can explore a few further key concepts:

* PersistentVolumes and PersistentVolumeClaims
* Secrets
* Deployments





== Create a Secret for MySQL Password
A https://kubernetes.io/docs/concepts/configuration/secret/[Secret] is an object that stores a piece of sensitive data like a password or key.

Your database password is a very good example of what should be created as a `Secret`.

Use the following command and remember to replace `YOUR_PASS` and `YOUR_USER_PASS`.

[source, bash]
----
kubectl create secret generic mysql-root-pass --from-literal=password=YOUR_PASS
kubectl create secret generic mysql-user-pass --from-literal=password=YOUR_USER_PASS
----

Verify that the Secret has been successfully created, like so:

[source, bash]
----
kubectl get secrets
----

The response should be like this:

[source, bash]
----
NAME                  TYPE                    DATA      AGE
mysql-root-pass            Opaque                  1         45s
mysql-user-pass            Opaque                  1         42s
----

The MYSQL_ROOT_PASSWORD environment variable sets the database password from the Secret.


== PersistentVolumes & PersistentVolumeClaims

You need the database data, to persist, right?

In a standard container, the data in a Docker volume only exists in the single server that container is running on. And this is not compatible with the requirements of cloud-native applications, where servers might get killed/replaced/deleted, at any given point in time.  For that reason, Kubernetes provides the notion of `PersistentVolumes`. link:https://kubernetes.io/docs/concepts/storage/persistent-volumes/[Persistent Volumes] have a different lifecycle than that of a `Pod`, so even in the case where your application is moved to another host, your data will persist.

Our MySQL container will mount the PersistentVolume at the standard data directory path: `/var/lib/mysql`.

`PersistentVolumeClaims` are a way for application developers to define storage requirements and have Kubernetes automatically create volumes for them and mount them to the corresponding `Pods`, through Dynamic Provisioning.

Go ahead and create the PersistentVolumeClaim with:

[source, bash]
----
kubectl apply -f pvc.yaml
----

== Deployments

The Kubernetes high-level link:https://kubernetes.io/docs/concepts/workloads/controllers/deployment/[Deployment] entity provides a controller that allows declarative updates for `Pods` and `ReplicaSets`. (More details on `Deployments` in link:../step3_HighAvailability/README.asciidoc[Step 3]).

We can now use a `Deployment` to deploy our mysql database, together with a `Service` (we'll also see more details on these later) to allow our app to connect to the database:

[source, bash]
----
kubectl apply -f deployment_mysql.yaml
kubectl apply -f service_mysql.yaml
----



== Let's Use this Database!

Those of you who have already taken the time to look in the `php` folder, will have found that there is another PHP file in there, named `smartHello.php` that tries to connect to a database, before responding. 

If you try this out now, you'll get a funky PHP error message. 

However, if you look in the source code (which, by the way, is mostly copy-pasted from the internet -- I'm no PHP expert -- so PRs are welcome! ; )  ), you'll notice that it tries to acquire the information about _which database to connect to_ through environment variables. 

Environment variables can be added as part of the `Pod` definition and they are a very convenient way to pass information into applications that are running from static container images. You would NOT want to rebuild your container image every time you wanted to change the database URL your application should connect to. (Remember: in a cloud-native environment, this can change more often than you think!!  ; )   )

Please take a look at link:pod_php.yaml[the Pod descriptor in this directory], where you'll notice the environment variables have been already added for you. 

If you try to `kubectl apply -f pod_php.yaml` directly, you'll get an error message from Kubernetes that basically informs you it's not an operation that is allowed. However, we can always use `kubectl delete` to get rid of the old pod, and then `kubectl apply` to create it again based on the new descriptor. 

Once deployed (verify through dashboard or `kubectl get pods` command), you should be able to access the `smartHello.php` file on the same host + port you used before. 
