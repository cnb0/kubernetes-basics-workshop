= Centralized Logging on Kubernetes

If you have already had some experience with one centralized logging solution or another, you can safely skip this section, as it is an entry-level introduction to the topic.

For this part of the workshop, we will take a quick look at how logs from ALL `Pods` can make their way into a single place, where we can quickly find the log output we're looking for, without having to manually look in the logs of each pod, one by one. Life would be too cruel, if that was our only way out!

== EFK: Elasticsearch, Fluentd, Kibana

WARNING: You will need at least 4GB memory and enough CPU for your minikube VM. To tune these, use `minikube start --cpus 2 --memory 4096`. You will have to stop your VM first, with `minikube stop`.

=== Option 1: Self-deployed EFK

[source, bash]
----
kubectl apply -f efk/elasticsearch

# this will take quite some time to start up. Please ensure ES is up and running before moving on.

kubectl apply -f efk/fluent-bit
kubectl apply -f efk/kibana
----

Now, sit back and wait while all the images are downloaded and all the pods start.

Once everything's ready, you should be able to open Kibana with the following command:

[source, bash]
----
minikube service kibana-logging -n logging
----

All your logs from your pods should already be there.


=== Option 2: Minikube EFK addon

WARNING: Please note this doesn't always work out of the box. Which is why I came up with Option 1 above.

For this example, we will use an off-the-shelf addon bundled with Kubernetes. The `efk` addon can be enabled with a simple command, even while your `minikube` is running, like so:

[source, bash]
----
minikube addons enable efk
----

Now, run the following command, to watch the progress of the EFK pods being created.

[source, bash]
----
watch -n 2 kubectl get pods -n kube-system
----

...doesn't it feel like magic?

